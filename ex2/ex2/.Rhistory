load("~/R/kaggle77b.RData")
dir()
test.data <- readMat(file.path("kaggle77b_testset.mat"))
library("R.matlab")
test.data <- readMat(file.path("kaggle77b_testset.mat"))
dir()
test.data <- readMat(file.path("R/kaggle77b_testset.mat"))
test.set <- as.data.frame(test.data[1])
test.set[test.set == 55] <- NA
print(test.set[1,])
test.set[test.set == NA] <- NULL
print(test.set[1,])
test.set <- as.data.frame(test.data[1])
print(test.set[1,])
test.set[test.set == 99] <- NA
print(test.set[1,])
test.set[test.set == 55] <- NULL
test.set[test.set == 55] <- "NULL"
print(test.set[1,])
test.set <- as.data.frame(test.data[1])
print(test.set[1,])
View(test.set)
test.set[test.set == 99] <- NA
View(test.set)
summary(train.set)
train.summary <- as.data.frame(summary(train.set))
view(train.summary)
View(train.summary)
rm(train.summary)
install.packages("ggplot")
plot(train.set)
plot(train.set[,1])
install.packages("gplots")
library("gplots")
qplot(train.set[,1])
lm.train <- lm(train.set[1,] ~ train.set[, 1])
class(train.set[1,])
row.set <- traim.set[1,]
row.set <- train.set[1,]
class(row.et)
class(row.set)
rm(row.set)
row.1 <- as.list(train.set[1,])
lm(row.1 ~ c(1:100))
class(c(1:100))
row.1 <- as.integer(train.set[1,])
lm(row.1 ~ c(1:100))
lm.1 <- lm(row.1 ~ c(1:100))
print(lm.1)
row.1 <- as.numeric(train.set[1,])
lm.1 <- lm(row.1 ~ c(1:100))
print(lm.1)
joke.id <- c(1:100)
colnames(train.data) <- joke.id
colnames(train.set) <- joke.id
names(train.data)
names(train.set)
rm(test.data)
save.image("~/R/kaggle77b.RData")
load("~/R/kaggle77b.RData")
temp <- cbind(1, 1:10)
View(temp)
temp <- cbind(3, 1:10)
View(temp)
norm(temp)
View(temp)
x <- rnorm(3000)
fix(x)
summary(x)
x <- rnorm(3000, 0, 2)
summary(x)
x <- rnorm(3000, 0, 2.1)
summary(x)
x <- rnorm(3000, 0, 2.5)
summary(x)
x <- rnorm(3000, 0, 2.8)
summary(x)
x <- rnorm(3000, 0, 2.7)
summary(x)
x <- rnorm(3000, 0, 2.6)
summary(x)
x3 <- c(rnorm(3000, 0, 2.6), rnorm(3000, 0, 2.6), rnorm(3000, 0, 2.6))
fix(`x3`)
rm(x3)
x3 <- data.frame(x)
View(`x3`)
x3[, 2] <- x
View(`x3`)
x3 <- data.frame(x)
x3[, 2] <- rnorm(3000, 0, 2.6)
View(`x3`)
x3[, 3] <- rnorm(3000, 0, 2.6)
write.csv(x3, file = "result.csv")
save.image("~/GitHub/ML/ex2/ex2/ex2.RData")
load("~/GitHub/ML/ex2/ex2/ex2.RData")
dir()
load("~/.RData")
cd("~/GitHub/ML/ex2/ex2/")
load("~/GitHub/ML/ex2/ex2/ex2.RData")
dir()
setwd("~/GitHub/ML/ex2/ex2")
data2.table <- read.table("ex2data1.txt")
View(data2.table)
data2.table <- read.table("ex2data1.txt", sep=",")
View(data2.table)
data2.table1 <- read.table("ex2data1.txt", sep=",")
data2.table <- 1
rm(data2.table)
View(data2.table1)
data2.table1[, 1]
View(data2.table1)
names(data1.table1) <- c("score1", "score2", "label")
names(data2.table1) <- c("score1", "score2", "label")
names(data2.table1)
View(data2.table1)
X <- data2.table1[,c(1:2)]
View(X)
y <- data2.table1[,3]
library("gplots")
install.packages("gtools")
install.packages("gdata")
detach("package:gplots")
install.packages("ggplot2")
library("ggplot2")
qplot(X,y)
qplot(score1,score2,X)
qplot("score1","score2",X)
qplot(score1,score2, data=X)
qplot(score1,score2, data=data2.table1, color=data2.table1.label)
qplot(score1,score2, data=data2.table1, color=label)
qplot(score1,score2, data=data2.table1, shape=label)
qplot(score1,score2, data=data2.table1, shape=label)
qplot(score1,score2, data=data2.table1, color=label)
qplot(score1,score2, data=data2.table1, color=label, geom=c("point", "smooth"), met)
qplot(score1,score2, data=data2.table1, color=label, geom=c("point", "smooth"))
library(MASS)
qplot(score1,score2, data=data2.table1, color=label, geom=c("point", "smooth"), method="rlm")
qplot(score1,score2, data=data2.table1, geom=c("point", "smooth"), method="rlm")
qplot(score1,score2, data=data2.table1, color=label)
library(splines)
qplot(score1,score2, data=data2.table1, color=label, geom=c("point", "smooth"), method="lm", formula = y ~ ns(x, 3))
qplot(score1,score2, data=data2.table1, color=label, xlab="Exam 1 score", ylab="Exam 2 score")
X <- cbind(data2.table1[, c(1:2)], 1)
View(X)
width(X)
length(col(X))
col(X)
row(X)
class(X)
X.cols
length(row.names(X))
length(col.names(X))
length(names(X))
initial_theta <- rep.int(0, length(names(X)))
X <- 1
X <- as.matrix(cbind(data2.table1[, c(1:2)], 1))
initial_theta <- as.matrix(rep.int(0, length(names(X))))
View(initial_theta)
View(initial_theta)
initial_theta <- as.matrix(c(rep.int(0, length(names(X)))))
View(initial_theta)
initial_theta <- rep.int(0, length(names(X)))
fix(initial_theta)
initial_theta <- rep.int(0, length(names(data2.table1)))
fix(initial_theta)
initial_theta <- as.matrix(rep.int(0, length(names(data2.table1))))
View(initial_theta)
theta.X <- initial_theta %*% X
theta.X <- X %*% initial_theta
View(theta.X)
theta.X <- 1
rm(theta.X)
log(exp(3))
#  sigmoid function
sigmoid <- function(x) {
return(1/(1+exp(-x)))
}
sigmoid(c(1:1000))
sigmoid(c(-100:100))
test <- cbind(c(-100:100), sigmoid(c(-100:100)))
View(test)
qplot(data=test)
qplot(V1, V2,data=test)
test <- as.data.frame(test)
qplot(V1, V2,data=test)
test <- as.data.frame(c(-1:1), sigmoid(c(-1:1))
)
View(test)
test <- as.data.frame(cbind(c(-1:1), sigmoid(c(-1:1))))
qplot(data=test)
qplot(V1, V2, data=test)
View(test)
c(1:5, 10.5, "next")
rep(-1:1,each=0.01)
test <- rep(-1:1,each=0.01)
fix(test)
fix(test)
test <- rep(-1:1,each=0.01, len=100)
test <- rep(-1:1,each=0.01, len=101)
rep(1:4, each = 2, len = 4)
rep(1:4, each = 2, len = 10)
rep(1, 40*(1-.8))
test <- c(-100:100)
test <- test / rep(100, length(test))
fix(test)
test <- cbind(test, sigmoid(test))
test <- as.data.frame(test)
qplot(V1, V2, data=test)
qplot(data=test)
View(test)
qplot(test, V2, data=test)
test <- c(-100:100)
test <- test / rep(10, length(test))
fix(test)
cbind(test, sigmoid(test))
test <- cbind(test, sigmoid(test))
qplot(test)
qplot(test, V2, data=test)
test <- as.data.frame(test)
qplot(test, V2, data=test)
qplot(test, V2, data=test, main="test for sigmoid function")
qplot(test, V2, data=test, main="test for sigmoid function", color = color)
qplot(test, V2, data=test, main="test for sigmoid function")
qplot(test, V2, data=test, main="test for sigmoid function", xlab="test data", ylab="sigmoid value")
qplot(test, V2, data=test, main="Test for Sigmoid Function", xlab="test data", ylab="sigmoid value")
qplot(score1,score2, data=data2.table1, color=label, xlab="Exam 1 score", ylab="Exam 2 score", main="Scatter plot of training data")
git pull
hypothesis <- function(x, theta, sigmoid) {
return(sigmoid(x %*% theta))
}
hypothesis(X, initial_theta, sigmoid)
y <- as.matrix(data2.table1[,3])
m <- length(y)
initial.theta <- as.matrix(rep.int(0, length(names(data2.table1))))
rm(initialâ€”â€”theta)
rm(initial_theta)
hypothesis <- function(x, theta) {
return(sigmoid(x %*% theta))
}
hypothesis(X[1,], initial.theta)
hypothesis(X[1,], initial.theta) * y[1]
log(hypothesis(X[1,], initial.theta))*y[1]
log(hypothesis(X[1,], initial.theta))*y[1] + (1-y[1]) * log(1-hypothesis(X[1,], initial.theta))
J.cost <- function(m, theta, x, y) {
i <- 1
cost <- 0;
while (i <= m) {
cost <- cost + y[i] * log(hypothesis(X[i,], theta)) + (1 - y[i]) * log(1 - hypothesis(X[i,], theta))
i <- i + 1;
}
cost <- (-1/m) * cost
return(cost)
}
J.cost(m, initial.theta, X, y)
temp <- as.data.frame(J.cost(m, initial.theta, X, y), initial.theta)
View(temp)
temp <- as.list(J.cost(m, initial.theta, X, y), initial.theta)
fix(temp)
fix(temp)
temp <- cbind(J.cost(m, initial.theta, X, y), initial.theta)
temp <- as.data.frame(c(J.cost(m, initial.theta, X, y), initial.theta))
View(temp)
temp <- as.list(c(J.cost(m, initial.theta, X, y), initial.theta))
fix(temp)
temp <- as.list(c(J.cost(m, initial.theta, X, y), c(initial.theta))
fix(temp)
temp <- as.data.frame(c(J.cost(m, initial.theta, X, y), c(initial.theta))
)
View(temp)
Jcost <- function(m, theta, x, y) {
i <- 1
cost <- 0;
while (i <= m) {
cost <- cost + y[i] * log(hypothesis(X[i,], theta)) + (1 - y[i]) * log(1 - hypothesis(X[i,], theta))
i <- i + 1;
}
cost <- (-1/m) * cost
return(cost)
}
result <- function(theta, X, y) {
result.list <- as.list(Jcost(m, theta, X, y), theta)
print("Cost at initial theta (zeros): %f\n", result.list[1])
print("Gradient at initial theta (zeros): \n%f\n", result.list[c(2:4)])
return(result.list)
}
result(initial.theta, X, y)
result(initial.theta, X, y)
#  Compute and display initial cost and gradient
result <- function(theta, X, y) {
result.list <- as.list(Jcost(m, theta, X, y), theta)
print("Cost at initial theta (zeros): %d\n", result.list[1])
print("Gradient at initial theta (zeros): \n%f\n", result.list[c(2:4)])
return(result.list)
}
result(initial.theta, X, y)
result <- function(theta, X, y) {
result.list <- as.list(Jcost(m, theta, X, y), theta)
sprintf("Cost at initial theta (zeros): %d\n", result.list[1])
sprintf("Gradient at initial theta (zeros): \n%f\n", result.list[c(2:4)])
return(result.list)
}
result(initial.theta, X, y)
result.list <- as.list(Jcost(m, initial.theta, X, y), theta)
result.list <- as.list(Jcost(m, initial.theta, X, y), initial.theta)
class(result.list[1])
result <- function(theta, X, y) {
result.list <- as.list(Jcost(m, theta, X, y), theta)
sprintf("Cost at initial theta (zeros): %f\n", as.double(result.list[1]))
sprintf("Gradient at initial theta (zeros): \n%f\n", as.double(result.list[c(2:4)]))
return(result.list)
}
result(initial.theta, X, y)
sprintf("%.0f%% said yes (out of a sample of size %.0f)", 66.666, 3)
xx <- sprintf("%1$d %1$x %1$X", 0:15)
sprintf("%1$d %1$x %1$X", 0:15)
rm(xx)
fix(result.list)
result.list <- as.list(Jcost(m, initial.theta, X, y), initial.theta)
fix(result.list)
fix(result.list)
result.list <- as.data.frame(Jcost(m, initial.theta, X, y), initial.theta)
View(initial.theta)
result.list <- as.data.frame(cbind(Jcost(m, initial.theta, X, y), initial.theta))
result.list <- as.data.frame(Jcost(m, initial.theta, X, y), initial.theta)
View(result.list)
result.list <- as.list(Jcost(m, initial.theta, X, y), initial.theta)
fix(result.list)
result.list <- as.list(cost=Jcost(m, initial.theta, X, y), grad=initial.theta)
