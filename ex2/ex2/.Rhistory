load("~/R/kaggle77b.RData")
dir()
test.data <- readMat(file.path("kaggle77b_testset.mat"))
library("R.matlab")
test.data <- readMat(file.path("kaggle77b_testset.mat"))
dir()
test.data <- readMat(file.path("R/kaggle77b_testset.mat"))
test.set <- as.data.frame(test.data[1])
test.set[test.set == 55] <- NA
print(test.set[1,])
test.set[test.set == NA] <- NULL
print(test.set[1,])
test.set <- as.data.frame(test.data[1])
print(test.set[1,])
test.set[test.set == 99] <- NA
print(test.set[1,])
test.set[test.set == 55] <- NULL
test.set[test.set == 55] <- "NULL"
print(test.set[1,])
test.set <- as.data.frame(test.data[1])
print(test.set[1,])
View(test.set)
test.set[test.set == 99] <- NA
View(test.set)
summary(train.set)
train.summary <- as.data.frame(summary(train.set))
view(train.summary)
View(train.summary)
rm(train.summary)
install.packages("ggplot")
plot(train.set)
plot(train.set[,1])
install.packages("gplots")
library("gplots")
qplot(train.set[,1])
lm.train <- lm(train.set[1,] ~ train.set[, 1])
class(train.set[1,])
row.set <- traim.set[1,]
row.set <- train.set[1,]
class(row.et)
class(row.set)
rm(row.set)
row.1 <- as.list(train.set[1,])
lm(row.1 ~ c(1:100))
class(c(1:100))
row.1 <- as.integer(train.set[1,])
lm(row.1 ~ c(1:100))
lm.1 <- lm(row.1 ~ c(1:100))
print(lm.1)
row.1 <- as.numeric(train.set[1,])
lm.1 <- lm(row.1 ~ c(1:100))
print(lm.1)
joke.id <- c(1:100)
colnames(train.data) <- joke.id
colnames(train.set) <- joke.id
names(train.data)
names(train.set)
rm(test.data)
save.image("~/R/kaggle77b.RData")
load("~/R/kaggle77b.RData")
temp <- cbind(1, 1:10)
View(temp)
temp <- cbind(3, 1:10)
View(temp)
norm(temp)
View(temp)
x <- rnorm(3000)
fix(x)
summary(x)
x <- rnorm(3000, 0, 2)
summary(x)
x <- rnorm(3000, 0, 2.1)
summary(x)
x <- rnorm(3000, 0, 2.5)
summary(x)
x <- rnorm(3000, 0, 2.8)
summary(x)
x <- rnorm(3000, 0, 2.7)
summary(x)
x <- rnorm(3000, 0, 2.6)
summary(x)
x3 <- c(rnorm(3000, 0, 2.6), rnorm(3000, 0, 2.6), rnorm(3000, 0, 2.6))
fix(`x3`)
rm(x3)
x3 <- data.frame(x)
View(`x3`)
x3[, 2] <- x
View(`x3`)
x3 <- data.frame(x)
x3[, 2] <- rnorm(3000, 0, 2.6)
View(`x3`)
x3[, 3] <- rnorm(3000, 0, 2.6)
write.csv(x3, file = "result.csv")
dir()
setwd("~/GitHub/ML/ex2/ex2")
dir()
load("~/GitHub/ML/ex2/ex2/.RData")
rm(J.cost)
sprintf("Cost at initial theta (zeros): %f\n", Jcost(m, initial.theta, X, y))
derivative <- function(j, x, y, m, theta) {
i <- 1
derivative.value <- 0
while (i <= m) {
derivative.value <- derivative.value + (hypothesis(x[i,], theta) - y[i]) * x[i, j]
i <- i + 1
}
derivative.value <- (1 / m) * derivative.value
}
derivative <- function(j, x, y, m, theta) {
i <- 1
derivative.value <- 0
while (i <= m) {
derivative.value <- derivative.value + (hypothesis(x[i,], theta) - y[i]) * x[i, j]
i <- i + 1
}
derivative.value <- (1 / m) * derivative.value
return(derivative.value)
}
derivative(1, X, y, m, initial.theta)
qplot(score1,score2, data=data2.table1, color=label, xlab="Exam 1 score", ylab="Exam 2 score", main="Scatter plot of training data")
print("Plotting data with different colors")
library("ggplot2")
qplot(score1,score2, data=data2.table1, color=label, xlab="Exam 1 score", ylab="Exam 2 score", main="Scatter plot of training data")
alpha <- 0.1
iteration <- 1500
cost.values <- rep(0, iteration)
theta <- initial.theta
theta[1]
theta[1] <- 1
theta
initial.theta
iterations <- 1500
rm(iteration)
class(cost.values)
sum(cost.values)
fix(cost.values)
cost.values <- rep(10000, iteration)
alpha <- 0.1
iterations <- 1500
cost.values <- rep(10000, iteration)
cost.values <- rep(10000, iterations)
sum(cost.values)
min(cost.values)
grand <- function(initial.theta, cost.values, x, y, m) {
sprintf("Cost at initial theta (zeros): %f", cost.values[1] <- Jcost(m, initial.theta, X, y))
theta <- initial.theta
theta.len <- length(theta)
i <- 1
while (i < iterations) {
j <- 1
new.theta <- theta
while (j <= theta.len) {
new.theta[j] <- new.theta[j] - alpha * derivative(j, x, y, m, theta)
j <- j+1
}
new.cost <- Jcost(m, new.theta, x, y)
if (new.cost < cost.values[i]) {
initial.theta <- new.theta
}
i <- i + 1
theta <- new.theta
cost.values[i] <- new.cost
}
return(min(cost.values))
}
iterations <- `
iterations <- 1
;
d
dvs
)
`
iterations <- 1
grand(initial.theta, cost.values, X, y, m)
initial.theta
grand <- function(initial.theta, cost.values, x, y, m) {
sprintf("Cost at initial theta (zeros): %f", cost.values[1] <- Jcost(m, initial.theta, X, y))
theta <- initial.theta
theta.len <- length(theta)
i <- 1
while (i < iterations) {
j <- 1
new.theta <- theta
while (j <= theta.len) {
new.theta[j] <- new.theta[j] - alpha * derivative(j, x, y, m, theta)
j <- j+1
}
new.cost <- Jcost(m, new.theta, x, y)
if (new.cost < cost.values[i]) {
initial.theta <- new.theta
}
i <- i + 1
theta <- new.theta
cost.values[i] <- new.cost
}
sprintf("initial.theta = %f", initial.theta)
return(min(cost.values))
}
grand(inital.theta, cost.values, X, y, m)
grand(initial.theta, cost.values, X, y, m)
sprintf("Cost at initial theta (zeros): %f", cost.values[1] <- Jcost(m, initial.theta, X, y))
grand <- function(initial.theta, cost.values, x, y, m) {
theta <- initial.theta
theta.len <- length(theta)
i <- 1
while (i < iterations) {
j <- 1
new.theta <- theta
while (j <= theta.len) {
new.theta[j] <- new.theta[j] - alpha * derivative(j, x, y, m, theta)
j <- j+1
}
new.cost <- Jcost(m, new.theta, x, y)
if (new.cost < cost.values[i]) {
initial.theta <- new.theta
}
i <- i + 1
theta <- new.theta
cost.values[i] <- new.cost
}
sprintf("initial.theta = %f", initial.theta)
return(min(cost.values), initial.theta)
}
grand(initial.theta, cost.values, X, y, m)
grand <- function(initial.theta, cost.values, x, y, m) {
theta <- initial.theta
theta.len <- length(theta)
i <- 1
while (i < iterations) {
j <- 1
new.theta <- theta
while (j <= theta.len) {
new.theta[j] <- new.theta[j] - alpha * derivative(j, x, y, m, theta)
j <- j+1
}
new.cost <- Jcost(m, new.theta, x, y)
if (new.cost < cost.values[i]) {
initial.theta <- new.theta
}
i <- i + 1
theta <- new.theta
cost.values[i] <- new.cost
}
sprintf("initial.theta = %f", initial.theta)
return([min(cost.values), initial.theta])
}
fix(hypothesis)
fix(result)
rm(result)
glm(y~X, family=inverse.gaussian, data=data2.table1)
View(data2.table1)
View(X)
glm(y~X, family=quasi, data=data2.table1)
glm(y~X, family=quasi)
glm(y~X)
glm.sol <- glm(y~X)
summary(glm.sol)
rm(glm)
rm(glm.sol)
print("Plotting data with different colors")
library("ggplot2")
qplot(score1,score2, data=data2.table1, color=label, xlab="Exam 1 score", ylab="Exam 2 score", main="Scatter plot of training data")
library("plyr")
detach("package:plyr")
max.score1 <- max(data2.table1[data2.table1$label==0])
names(data2.table1)
max.score1 <- max(data2.table1[,,data2.table1$label==0])
max.score1
temp1 <- data2.table1[max(data2.table1$score1), , data2.table1$label==0]
temp1
temp1 <- data2.table1[data2.table1$score1==max.score1, , data2.table1$label==0]
temp1
max(data2.table1$score1)
rm(temp1,max.score1)
data2.table1[data2.table1$score1==max(data2.table1$score1),,]
max.score1 <- data2.table1[data2.table1$score1==max(data2.table1$score1),,]
max.score2 <- data2.table1[,data2.table1$score1==max(data2.table1$score2),]
max.score2
max.score2 <- data2.table1[,data2.table1$score2==max(data2.table1$score2),]
max.score2 <- max(data2.table1$score2)
max.score2
max.score2 <- data2.table1[data2.table1$score2==max(data2.table1$score2),,]
max.score2
